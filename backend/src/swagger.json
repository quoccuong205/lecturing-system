{
  "openapi": "3.0.0",
  "info": {
    "title": "Lecture Management System API",
    "description": "API documentation for the Lecture Management System",
    "version": "1.0.0",
    "contact": {
      "name": "API Support",
      "email": "support@lecture-system.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:5001",
      "description": "Development Server"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication endpoints"
    },
    {
      "name": "Users",
      "description": "User management endpoints"
    },
    {
      "name": "Lectures",
      "description": "Lecture management endpoints"
    }
  ],
  "paths": {
    "/api/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "Register a new user",
        "description": "Creates a new user account",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegistration"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully"
          },
          "400": {
            "description": "Validation error or user already exists"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "Log in a user",
        "description": "Authenticates a user and returns a JWT token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLogin"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Login successful"
                    },
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid credentials"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/users/profile": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user profile",
        "description": "Retrieves the logged-in user's profile",
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfile"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": ["Users"],
        "summary": "Update user profile",
        "description": "Updates the logged-in user's profile",
        "security": [{ "BearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserProfileUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully"
          },
          "400": {
            "description": "Validation error or username/email already in use"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/users/change-password": {
      "put": {
        "tags": ["Users"],
        "summary": "Change password",
        "description": "Changes the logged-in user's password",
        "security": [{ "BearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePassword"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully"
          },
          "400": {
            "description": "Validation error or incorrect current password"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/users/reset-password": {
      "post": {
        "tags": ["Users"],
        "summary": "Reset password",
        "description": "Resets a user's password (simplified version for this assignment)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPassword"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successfully"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/lectures": {
      "post": {
        "tags": ["Lectures"],
        "summary": "Create a new lecture",
        "description": "Creates a new lecture (admin only)",
        "security": [{ "BearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Introduction to React"
                  },
                  "description": {
                    "type": "string",
                    "example": "Learn the basics of React"
                  },
                  "video": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": ["title", "video"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Lecture created successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "403": {
            "description": "Forbidden - Not an admin"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "get": {
        "tags": ["Lectures"],
        "summary": "Get all lectures",
        "description": "Retrieves all lectures",
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Lectures retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Lecture"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/lectures/{id}": {
      "get": {
        "tags": ["Lectures"],
        "summary": "Get a lecture by ID",
        "description": "Retrieves a specific lecture by ID",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Lecture ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Lecture retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Lecture"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "404": {
            "description": "Lecture not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": ["Lectures"],
        "summary": "Update a lecture",
        "description": "Updates a specific lecture (admin only)",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Lecture ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Advanced React Hooks"
                  },
                  "description": {
                    "type": "string",
                    "example": "Deep dive into React Hooks"
                  },
                  "video": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Lecture updated successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "403": {
            "description": "Forbidden - Not an admin"
          },
          "404": {
            "description": "Lecture not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": ["Lectures"],
        "summary": "Delete a lecture",
        "description": "Deletes a specific lecture (admin only)",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Lecture ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Lecture deleted successfully"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "403": {
            "description": "Forbidden - Not an admin"
          },
          "404": {
            "description": "Lecture not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "UserRegistration": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "john_doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "Password123!"
          },
          "role": {
            "type": "string",
            "enum": ["admin", "user"],
            "example": "user"
          }
        },
        "required": ["username", "email", "password"]
      },
      "UserLogin": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "john_doe"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "Password123!"
          }
        },
        "required": ["username", "password"]
      },
      "UserProfile": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "john_doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john@example.com"
          }
        }
      },
      "UserProfileUpdate": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "john_smith"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.smith@example.com"
          }
        }
      },
      "ChangePassword": {
        "type": "object",
        "properties": {
          "currentPassword": {
            "type": "string",
            "format": "password",
            "example": "Password123!"
          },
          "newPassword": {
            "type": "string",
            "format": "password",
            "example": "NewPassword456!"
          }
        },
        "required": ["currentPassword", "newPassword"]
      },
      "ResetPassword": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "john@example.com"
          },
          "newPassword": {
            "type": "string",
            "format": "password",
            "example": "NewPassword456!"
          }
        },
        "required": ["email", "newPassword"]
      },
      "Lecture": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "60d21b4667d0d8992e610c85"
          },
          "title": {
            "type": "string",
            "example": "Introduction to React"
          },
          "description": {
            "type": "string",
            "example": "Learn the basics of React"
          },
          "videoUrl": {
            "type": "string",
            "example": "https://lecture-bucket.s3.amazonaws.com/lectures/video123.mp4"
          },
          "createdBy": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "example": "60d21b4667d0d8992e610c84"
              },
              "username": {
                "type": "string",
                "example": "admin_user"
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-03-25T10:30:00Z"
          }
        }
      }
    }
  }
}
